
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parse;

import absyn.*;
import error.ErrorHelper;
import io.vavr.collection.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SymbolConstants.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\010\000" +
    "\002\003\010\000\002\003\006\000\002\003\005\000\002" +
    "\003\006\000\002\004\002\000\002\004\003\000\002\004" +
    "\005\000\002\010\010\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\004\000\002\007\002\000\002\007\003\000\002" +
    "\007\005\000\002\011\003\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\014\034\005\035\004\036\012\037\006\040" +
    "\014\001\002\000\004\011\uffe3\001\002\000\004\011\uffe2" +
    "\001\002\000\004\011\uffdf\001\002\000\004\002\122\001" +
    "\002\000\004\002\000\001\002\000\004\011\121\001\002" +
    "\000\004\011\uffe0\001\002\000\016\002\uffda\034\005\035" +
    "\004\036\012\037\006\040\014\001\002\000\004\011\uffe1" +
    "\001\002\000\004\031\016\001\002\000\016\032\uffdd\034" +
    "\005\035\004\036\012\037\006\040\014\001\002\000\004" +
    "\032\023\001\002\000\006\032\uffdc\033\021\001\002\000" +
    "\016\032\uffdd\034\005\035\004\036\012\037\006\040\014" +
    "\001\002\000\004\032\uffdb\001\002\000\004\021\024\001" +
    "\002\000\024\004\027\005\031\006\026\007\036\011\033" +
    "\031\035\041\032\044\025\046\034\001\002\000\024\004" +
    "\027\005\031\006\026\007\036\011\033\031\035\041\032" +
    "\044\025\046\034\001\002\000\064\002\ufffd\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\042\ufffd" +
    "\043\ufffd\045\ufffd\047\ufffd\001\002\000\064\002\uffff\014" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff" +
    "\023\uffff\024\uffff\025\uffff\026\uffff\027\uffff\030\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff" +
    "\042\uffff\043\uffff\045\uffff\047\uffff\001\002\000\050\002" +
    "\uffe4\014\046\015\043\016\053\017\050\020\054\021\045" +
    "\022\055\023\056\024\047\025\051\026\044\027\042\030" +
    "\057\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002" +
    "\000\064\002\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\042\ufffe\043\ufffe\045\ufffe\047\ufffe" +
    "\001\002\000\024\004\027\005\031\006\026\007\036\011" +
    "\033\031\035\041\032\044\025\046\034\001\002\000\070" +
    "\002\ufffb\012\104\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\031\103\032\ufffb\033\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\042\ufffb\043\ufffb\045\ufffb" +
    "\047\ufffb\001\002\000\004\011\076\001\002\000\026\004" +
    "\027\005\031\006\026\007\036\011\033\031\035\032\uffe7" +
    "\041\032\044\025\046\034\001\002\000\064\002\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\042\ufffc\043\ufffc\045\ufffc\047\ufffc\001\002\000\040\014" +
    "\046\015\043\016\053\017\050\020\054\021\045\022\055" +
    "\023\056\024\047\025\051\026\044\027\042\030\057\032" +
    "\uffe6\033\052\001\002\000\004\032\041\001\002\000\064" +
    "\002\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\042\uffed\043\uffed\045\uffed\047\uffed\001\002" +
    "\000\024\004\027\005\031\006\026\007\036\011\033\031" +
    "\035\041\032\044\025\046\034\001\002\000\024\004\027" +
    "\005\031\006\026\007\036\011\033\031\035\041\032\044" +
    "\025\046\034\001\002\000\024\004\027\005\031\006\026" +
    "\007\036\011\033\031\035\041\032\044\025\046\034\001" +
    "\002\000\024\004\027\005\031\006\026\007\036\011\033" +
    "\031\035\041\032\044\025\046\034\001\002\000\024\004" +
    "\027\005\031\006\026\007\036\011\033\031\035\041\032" +
    "\044\025\046\034\001\002\000\024\004\027\005\031\006" +
    "\026\007\036\011\033\031\035\041\032\044\025\046\034" +
    "\001\002\000\024\004\027\005\031\006\026\007\036\011" +
    "\033\031\035\041\032\044\025\046\034\001\002\000\024" +
    "\004\027\005\031\006\026\007\036\011\033\031\035\041" +
    "\032\044\025\046\034\001\002\000\026\004\027\005\031" +
    "\006\026\007\036\011\033\031\035\032\uffe7\041\032\044" +
    "\025\046\034\001\002\000\024\004\027\005\031\006\026" +
    "\007\036\011\033\031\035\041\032\044\025\046\034\001" +
    "\002\000\024\004\027\005\031\006\026\007\036\011\033" +
    "\031\035\041\032\044\025\046\034\001\002\000\024\004" +
    "\027\005\031\006\026\007\036\011\033\031\035\041\032" +
    "\044\025\046\034\001\002\000\024\004\027\005\031\006" +
    "\026\007\036\011\033\031\035\041\032\044\025\046\034" +
    "\001\002\000\024\004\027\005\031\006\026\007\036\011" +
    "\033\031\035\041\032\044\025\046\034\001\002\000\064" +
    "\002\uffee\014\046\015\043\016\053\017\050\020\054\021" +
    "\045\022\055\023\056\024\047\025\051\026\044\027\042" +
    "\030\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\042\uffee\043\uffee\045\uffee\047\uffee\001\002" +
    "\000\050\002\ufff3\014\046\015\043\016\053\017\050\020" +
    "\054\027\ufff3\030\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\042\ufff3\043\ufff3\045\ufff3\047" +
    "\ufff3\001\002\000\050\002\ufff4\014\046\015\043\016\053" +
    "\017\050\020\054\027\ufff4\030\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\042\ufff4\043\ufff4" +
    "\045\ufff4\047\ufff4\001\002\000\064\002\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\054\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\042\ufff6" +
    "\043\ufff6\045\ufff6\047\ufff6\001\002\000\064\002\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\054\021\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\032" +
    "\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8" +
    "\042\ufff8\043\ufff8\045\ufff8\047\ufff8\001\002\000\004\032" +
    "\uffe5\001\002\000\050\002\ufff1\014\046\015\043\016\053" +
    "\017\050\020\054\027\ufff1\030\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1" +
    "\045\ufff1\047\ufff1\001\002\000\064\002\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\054\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\042\ufff7" +
    "\043\ufff7\045\ufff7\047\ufff7\001\002\000\050\002\ufff2\014" +
    "\046\015\043\016\053\017\050\020\054\027\ufff2\030\ufff2" +
    "\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\042\ufff2\043\ufff2\045\ufff2\047\ufff2\001\002\000\064" +
    "\002\ufffa\014\ufffa\015\ufffa\016\053\017\050\020\054\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\042\ufffa\043\ufffa\045\ufffa\047\ufffa\001\002" +
    "\000\050\002\ufff5\014\046\015\043\016\053\017\050\020" +
    "\054\027\ufff5\030\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\042\ufff5\043\ufff5\045\ufff5\047" +
    "\ufff5\001\002\000\050\002\ufff0\014\046\015\043\016\053" +
    "\017\050\020\054\027\ufff0\030\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\043\ufff0" +
    "\045\ufff0\047\ufff0\001\002\000\064\002\ufff9\014\ufff9\015" +
    "\ufff9\016\053\017\050\020\054\021\ufff9\022\ufff9\023\ufff9" +
    "\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\042\ufff9" +
    "\043\ufff9\045\ufff9\047\ufff9\001\002\000\064\002\uffef\014" +
    "\046\015\043\016\053\017\050\020\054\021\045\022\055" +
    "\023\056\024\047\025\051\026\044\027\uffef\030\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef" +
    "\042\uffef\043\uffef\045\uffef\047\uffef\001\002\000\004\021" +
    "\077\001\002\000\024\004\027\005\031\006\026\007\036" +
    "\011\033\031\035\041\032\044\025\046\034\001\002\000" +
    "\036\014\046\015\043\016\053\017\050\020\054\021\045" +
    "\022\055\023\056\024\047\025\051\026\044\027\042\030" +
    "\057\047\101\001\002\000\024\004\027\005\031\006\026" +
    "\007\036\011\033\031\035\041\032\044\025\046\034\001" +
    "\002\000\064\002\uffec\014\046\015\043\016\053\017\050" +
    "\020\054\021\045\022\055\023\056\024\047\025\051\026" +
    "\044\027\042\030\057\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec\045\uffec\047" +
    "\uffec\001\002\000\026\004\027\005\031\006\026\007\036" +
    "\011\033\031\035\032\uffe7\041\032\044\025\046\034\001" +
    "\002\000\024\004\027\005\031\006\026\007\036\011\033" +
    "\031\035\041\032\044\025\046\034\001\002\000\064\002" +
    "\uffe9\014\046\015\043\016\053\017\050\020\054\021\045" +
    "\022\055\023\056\024\047\025\051\026\044\027\042\030" +
    "\057\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\042\uffe9\043\uffe9\045\uffe9\047\uffe9\001\002\000" +
    "\004\032\107\001\002\000\064\002\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\030\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea\043" +
    "\uffea\045\uffea\047\uffea\001\002\000\036\014\046\015\043" +
    "\016\053\017\050\020\054\021\045\022\055\023\056\024" +
    "\047\025\051\026\044\027\042\030\057\042\111\001\002" +
    "\000\024\004\027\005\031\006\026\007\036\011\033\031" +
    "\035\041\032\044\025\046\034\001\002\000\036\014\046" +
    "\015\043\016\053\017\050\020\054\021\045\022\055\023" +
    "\056\024\047\025\051\026\044\027\042\030\057\043\113" +
    "\001\002\000\024\004\027\005\031\006\026\007\036\011" +
    "\033\031\035\041\032\044\025\046\034\001\002\000\064" +
    "\002\uffeb\014\046\015\043\016\053\017\050\020\054\021" +
    "\045\022\055\023\056\024\047\025\051\026\044\027\042" +
    "\030\057\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\043\uffeb\045\uffeb\047\uffeb\001\002" +
    "\000\036\014\046\015\043\016\053\017\050\020\054\021" +
    "\045\022\055\023\056\024\047\025\051\026\044\027\042" +
    "\030\057\045\116\001\002\000\024\004\027\005\031\006" +
    "\026\007\036\011\033\031\035\041\032\044\025\046\034" +
    "\001\002\000\064\002\uffe8\014\046\015\043\016\053\017" +
    "\050\020\054\021\045\022\055\023\056\024\047\025\051" +
    "\026\044\027\042\030\057\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\045\uffe8" +
    "\047\uffe8\001\002\000\004\002\uffd9\001\002\000\010\031" +
    "\uffde\032\uffde\033\uffde\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\014\002\006\005\010\006\014\010\012\011" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\010\006\014\010\012" +
    "\011\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\010\006\017\007\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\010\006\017\007\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\027" +
    "\001\001\000\004\003\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\036\004\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\074\001\001\000\004\003\073\001\001\000\004\003\072" +
    "\001\001\000\004\003\071\001\001\000\004\003\070\001" +
    "\001\000\004\003\067\001\001\000\004\003\066\001\001" +
    "\000\004\003\065\001\001\000\006\003\036\004\064\001" +
    "\001\000\004\003\063\001\001\000\004\003\062\001\001" +
    "\000\004\003\061\001\001\000\004\003\060\001\001\000" +
    "\004\003\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\077\001\001\000\002\001\001\000\004\003" +
    "\101\001\001\000\002\001\001\000\006\003\036\004\105" +
    "\001\001\000\004\003\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\111\001\001\000\002\001\001\000\004\003\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Parser(Lexer lex) {
     this(lex, lex.getSymbolFactory());
  }

  private Loc loc(Location left, Location right) {
     return Loc.loc(left, right);
  }

  /* override error routines */
  private Loc locOfInfo(Object info) {
     return info instanceof ComplexSymbol ?
               Loc.loc((ComplexSymbol) info) :
               info instanceof Symbol ?
                  Loc.loc((Symbol) info) :
                  Loc.loc(cur_token);
  }

  private String lexemeOfInfo(Object info) {
     return info instanceof ComplexSymbol ?
               " at '" + ((ComplexSymbol) info).getName() + "'" :
               "";

  }

  public void report_fatal_error(String message, Object info) {
     done_parsing();
     throw ErrorHelper.error(locOfInfo(info),
                             "%s%s%nCan't recover from previous error(s), giving up.",
                             message,
                             lexemeOfInfo(info));
  }

  public void report_error(String message, Object info) {
     throw ErrorHelper.error(locOfInfo(info),
                             "%s%s",
                             message,
                             lexemeOfInfo(info));
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= funs 
            {
              Program RESULT =null;
		Location fsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Fun> fs = (List<Fun>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(loc(fsxleft, fsxright), fs); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= LITINT 
            {
              Exp RESULT =null;
		Location ctexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ctexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String cte = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpInt(loc(ctexleft, ctexright), cte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= LITBOOL 
            {
              Exp RESULT =null;
		Location ctexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ctexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String cte = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBool(loc(ctexleft, ctexright), cte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= LITTEXT 
            {
              Exp RESULT =null;
		Location ctexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ctexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String cte = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpText(loc(ctexleft, ctexright), cte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= LITREAL 
            {
              Exp RESULT =null;
		Location ctexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ctexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String cte = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpReal(loc(ctexleft, ctexright), cte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= ID 
            {
              Exp RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpVar(loc(nxleft, nxright), n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= exp PLUS exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.PLUS, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= exp MINUS exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.MINUS, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= exp TIMES exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.TIMES, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp DIV exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.DIV, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp POWER exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.POWER, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp EQ exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.EQ, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp NE exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.NE, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp LT exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.LT, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp LE exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.LE, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp GT exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.GT, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp GE exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.GE, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp AND exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.AND, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp OR exp 
            {
              Exp RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location yxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location yxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp y = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpBin(loc(xxleft, yxright), BinOp.OR, x, y); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= LPAREN exps RPAREN 
            {
              Exp RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Exp> s = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpSequence(loc(lxleft,rxright), s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= LET ID EQ exp IN exp 
            {
              Exp RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp i = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpLet(loc(lxleft, bxright), v, i, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpIf(loc(ixleft, bxright), t, a, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= ID LPAREN exps RPAREN 
            {
              Exp RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		List<Exp> args = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpCall(loc(fxleft, rxright), f, args); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= ID ASSIGN exp 
            {
              Exp RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpAssign(loc(vxleft,exright), v, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= WHILE exp DO exp 
            {
              Exp RESULT =null;
		Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpWhile(loc(wxleft,bxright), t, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exps ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = List.empty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exps ::= exp 
            {
              List<Exp> RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = List.of(x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exps ::= exp COMMA exps 
            {
              List<Exp> RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Exp x = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location xsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Exp> xs = (List<Exp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xs.prepend(x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exps",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fun ::= typeid LPAREN typeids RPAREN EQ exp 
            {
              Fun RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).xright;
		TypeId n = (TypeId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		Location psxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location psxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<TypeId> ps = (List<TypeId>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Fun(loc(nxleft, bxright), n, ps, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= INT 
            {
              Ty RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TyInt(loc(txleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= BOOL 
            {
              Ty RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TyBool(loc(txleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= TEXT 
            {
              Ty RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TyText(loc(txleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= REAL 
            {
              Ty RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TyReal(loc(txleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= VOID 
            {
              Ty RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TyVoid(loc(txleft, txright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // typeid ::= type ID 
            {
              TypeId RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Ty t = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new TypeId(loc(txleft, xxright), t, x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeid",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // typeids ::= 
            {
              List<TypeId> RESULT =null;
		 RESULT = List.empty(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeids",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // typeids ::= typeid 
            {
              List<TypeId> RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		TypeId x = (TypeId)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = List.of(x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeids",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // typeids ::= typeid COMMA typeids 
            {
              List<TypeId> RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		TypeId x = (TypeId)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location xsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<TypeId> xs = (List<TypeId>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xs.prepend(x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeids",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funs ::= fun 
            {
              List<Fun> RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Fun x = (Fun)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = List.of(x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funs ::= fun funs 
            {
              List<Fun> RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Fun x = (Fun)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location xsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		List<Fun> xs = (List<Fun>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = xs.prepend(x); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funs",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
